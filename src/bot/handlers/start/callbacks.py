from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
)
from dependency_injector.wiring import Provide, inject

from bot.container import Container
from bot.enums import BotModeEnum
from bot.interfaces.services.user import AbcUserService
from bot.interfaces.services.pricing import AbcPricingService
from bot.keyboards.change_ai import mode_keyboard
from bot.keyboards.start import (
    account_keyboard,
    start_keyboard,
    replenish_keyboard,
    replenish_stars_keyboard,
)
from bot.interfaces.services.payments import AbcPaymentsService
from bot.interfaces.uow import AbcUnitOfWork
from bot.entities.ledger import LedgerEntity
from bot.enums import LedgerReasonEnum
import json

router = Router()


@router.callback_query(F.data == "set_mode:chatgpt")
@inject
async def set_mode_chatgpt(
    call: CallbackQuery,
    state: FSMContext,
    pricing: AbcPricingService = Provide[Container.pricing_service],
    service: AbcUserService = Provide[Container.user_service],
):
    user = await service.get_user(call.from_user.id)
    can_afford = await pricing.ensure_user_can_afford(user.balance, BotModeEnum.gpt5)
    if not can_afford:
        # Switch to GPT-5 Mini immediately with a clear notification
        await state.update_data(mode=BotModeEnum.gpt5_mini)
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT-5. –ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ GPT-5 Mini.", show_alert=True)
        await call.message.edit_reply_markup(reply_markup=mode_keyboard(BotModeEnum.gpt5_mini, gpt5_available=False))
        await call.message.answer(
            "‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT‚Äë5 ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω *GPT‚Äë5 Mini*.",
            parse_mode="Markdown",
        )
        return
    await state.update_data(mode=BotModeEnum.gpt5)
    await call.answer("–†–µ–∂–∏–º ChatGPT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    await call.message.edit_reply_markup(reply_markup=mode_keyboard(BotModeEnum.gpt5, gpt5_available=True))
    await call.message.answer(
        "ü§ñ –¢–µ–ø–µ—Ä—å –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å *GPT-5*.\n\n"
        "üîÑ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start",
        parse_mode="Markdown",
    )

@router.callback_query(F.data == "set_mode:chatgpt_mini")
@inject
async def set_mode_chatgpt_mini(
    call: CallbackQuery,
    state: FSMContext,
    pricing: AbcPricingService = Provide[Container.pricing_service],
    service: AbcUserService = Provide[Container.user_service],
):
    user = await service.get_user(call.from_user.id)
    can_afford_mini = await pricing.ensure_user_can_afford(user.balance, BotModeEnum.gpt5_mini)
    if not can_afford_mini:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT-5 Mini.", show_alert=True)
        return
    await state.update_data(mode=BotModeEnum.gpt5_mini)
    await call.answer("–†–µ–∂–∏–º GPT-5 Mini –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    await call.message.edit_reply_markup(reply_markup=mode_keyboard(BotModeEnum.gpt5_mini, gpt5_available=False))
    await call.message.answer(
        "ü§ñ –¢–µ–ø–µ—Ä—å –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å *GPT-5 Mini*.\n\n"
        "üîÑ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start",
        parse_mode="Markdown",
    )

@router.callback_query(F.data == "set_mode:dalle")
@inject
async def set_mode_dalle(
    call: CallbackQuery,
    state: FSMContext,
    pricing: AbcPricingService = Provide[Container.pricing_service],
    service: AbcUserService = Provide[Container.user_service],
):
    user = await service.get_user(call.from_user.id)
    can_afford = await pricing.ensure_user_can_afford(user.balance, BotModeEnum.dalle3)
    if not can_afford:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è DALL¬∑E 3.", show_alert=True)
        return
    await state.update_data(mode=BotModeEnum.dalle3)
    await call.answer("–†–µ–∂–∏–º DALL-E –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    can_gpt5 = await pricing.ensure_user_can_afford(user.balance, BotModeEnum.gpt5)
    await call.message.edit_reply_markup(reply_markup=mode_keyboard(BotModeEnum.dalle3, gpt5_available=can_gpt5))
    await call.message.answer(
        "üñºÔ∏è –¢–µ–ø–µ—Ä—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è *DALL-E 3* –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
        "üîÑ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start",
        parse_mode="Markdown",
    )

@router.callback_query(F.data == "set_mode:veo")
@inject
async def set_mode_veo(
    call: CallbackQuery,
    state: FSMContext,
    pricing: AbcPricingService = Provide[Container.pricing_service],
    service: AbcUserService = Provide[Container.user_service],
):
    user = await service.get_user(call.from_user.id)
    can_afford = await pricing.ensure_user_can_afford(user.balance, BotModeEnum.veo)
    if not can_afford:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è Veo‚Äë3.", show_alert=True)
        return
    await state.update_data(mode=BotModeEnum.veo)
    await call.answer("–†–µ–∂–∏–º Veo‚Äë3 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    can_gpt5 = await pricing.ensure_user_can_afford(user.balance, BotModeEnum.gpt5)
    await call.message.edit_reply_markup(reply_markup=mode_keyboard(BotModeEnum.veo, gpt5_available=can_gpt5))
    await call.message.answer(
        "üé¨ –¢–µ–ø–µ—Ä—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è *Veo‚Äë3* –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ.\n\n"
        "üîÑ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start",
        parse_mode="Markdown",
    )

@router.callback_query(F.data == "goto:account")
@inject
async def goto_account(
    call: CallbackQuery,
    service: AbcUserService = Provide[Container.user_service],
):
    await call.answer()

    first_name = call.from_user.first_name
    last_name = call.from_user.last_name if call.from_user.last_name else None
    username = call.from_user.username if call.from_user.username else None
    user = await service.get_user(call.from_user.id)

    display_name_parts = [first_name or ""]
    if last_name:
        display_name_parts.append(f" {last_name}")
    if username:
        display_name_parts.append(f" (@{username})")
    display_name = "".join(display_name_parts)

    await call.message.edit_text(
        text=(
            f"üéüÔ∏è *–ê–∫–∫–∞—É–Ω—Ç*\n\n"
            f"üêª‚Äç‚ùÑÔ∏è *{display_name}*\n\n"
            f"ü™ô –ë–∞–ª–∞–Ω—Å: *{user.balance}* —Ç–æ–∫–µ–Ω–æ–≤\n"
            f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: *+150* —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            f"üëá –î–µ–π—Å—Ç–≤–∏—è:"
        ),
        reply_markup=account_keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )



@router.callback_query(F.data == "goto:start")
@inject
async def goto_start(
    call: CallbackQuery,
    state: FSMContext,
    service: AbcUserService = Provide[Container.user_service],
    pricing: AbcPricingService = Provide[Container.pricing_service],
):
    await call.answer()

    await state.update_data(history=[])
    user, _ = await service.is_user_new(call.from_user)
    mode = (await state.get_data()).get('mode', BotModeEnum.passive)
    price = await pricing.get_price_for_mode(mode)
    await call.message.edit_text(
        text=(
            f"üëã –ü—Ä–∏–≤–µ—Ç, *{call.from_user.first_name}*!\n\n"
            f"ü™ô –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *{user.balance} —Ç–æ–∫–µ–Ω–æ–≤*\n\n"
            f"ü§ñ –¢–µ–∫—É—â–∏–π –ò–ò: *{mode}*\n"
            f"üí∏ –¶–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: *{price} —Ç–æ–∫–µ–Ω–æ–≤*\n\n"
            f"üëá –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
        ),
        reply_markup=start_keyboard(mode, is_admin=bool(user.is_admin)),
        parse_mode=ParseMode.MARKDOWN,
    )


@router.callback_query(F.data == "goto:replenish")
@inject
async def goto_replenish(
    call: CallbackQuery,
):
    await call.answer()
    await call.message.edit_text(
        text=(
            "*üí∞ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:*\n\n"
            "üí≥ *–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π*\n"
            "–î–æ—Å—Ç—É–ø–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏, –≤—ã–ø—É—â–µ–Ω–Ω—ã–º–∏ –≤ –†–§, –∏ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –ë–µ–ª–∫–∞—Ä—Ç.\n\n"
            "–ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å:\n"
            "‚≠ê *Telegram Stars* ‚Äî –∏—Ö –ª–µ–≥–∫–æ –∫—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Apple Store –∏–ª–∏ Google Play.\n"
            "üåê *USDT* (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞).\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
        ),
        reply_markup=replenish_keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )


@router.callback_query(F.data.startswith("buy:"))
@inject
async def create_invoice(
    call: CallbackQuery,
    payments: AbcPaymentsService = Provide[Container.payments_service],
):
    await call.answer()
    amount_tokens = int(call.data.split(":", 1)[1])
    pay_url = await payments.create_invoice(telegram_id=call.from_user.id, amount_tokens=amount_tokens)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goto:account")],
        ]
    )

    await call.message.edit_text(
        text=(
            f"üí≥ –û–ø–ª–∞—Ç–∞ {amount_tokens} —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞—Ä—Ç–æ–π\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        ),
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )


@router.callback_query(F.data == "goto:replenish_stars")
@inject
async def goto_replenish_stars(
    call: CallbackQuery,
):
    await call.answer()
    await call.message.edit_text(
        text=(
            "‚≠ê –û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram Stars."
        ),
        reply_markup=replenish_stars_keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )


@router.callback_query(F.data.startswith("buy_star:"))
@inject
async def stars_create_invoice(
    call: CallbackQuery,
):
    await call.answer()
    amount_tokens = int(call.data.split(":", 1)[1])

    # Convert tokens to stars based on your mapping (1 ‚ÇΩ ~= 1 ‚≠ê in your tiers)
    token_to_star = {
        1000: 100,
        5500: 500,
        12000: 1000,
        32500: 2500,
        70000: 5000,
    }
    stars = token_to_star.get(amount_tokens)
    if not stars:
        await call.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥.")
        return

    title = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount_tokens} —Ç–æ–∫–µ–Ω–æ–≤ Vento"
    description = "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars"
    payload = json.dumps({"type": "stars", "tokens": amount_tokens})

    prices = [LabeledPrice(label="Vento tokens", amount=stars)]

    await call.message.answer_invoice(
        title=title,
        description=description,
        payload=payload,
        currency="XTR",
        prices=prices,
    )


@router.pre_checkout_query()
@inject
async def stars_pre_checkout(
    pre_checkout_query: PreCheckoutQuery,
):
    # Approve all Stars payments
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
@inject
async def stars_success(
    message: Message,
    uow: AbcUnitOfWork = Provide[Container.uow],
):
    sp = message.successful_payment
    if not sp or sp.currency != "XTR":
        return

    try:
        payload = json.loads(sp.invoice_payload or "{}")
    except json.JSONDecodeError:
        payload = {}

    amount_tokens = int(payload.get("tokens") or 0)
    if amount_tokens <= 0:
        return

    async with uow:
        user = await uow.user.get_by_telegram_id(message.from_user.id)
        if not user:
            return
        updated = await uow.user.update_balance_by_user_id(user.id, amount_tokens)
        if updated:
            await uow.ledger.add(
                LedgerEntity(
                    user_id=user.id,
                    delta=amount_tokens,
                    reason=LedgerReasonEnum.purchase_tokens,
                    meta=json.dumps({"method": "stars", "total_stars": sp.total_amount}),
                )
            )

    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–æ–∫–µ–Ω—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")

@router.callback_query(F.data == "goto:switch")
@inject
async def goto_switch(
    call: CallbackQuery,
    state: FSMContext,
    service: AbcUserService = Provide[Container.user_service],
    pricing: AbcPricingService = Provide[Container.pricing_service],
):
    user = await service.get_user(call.from_user.id)
    can_gpt5 = await pricing.ensure_user_can_afford(user.balance, BotModeEnum.gpt5)
    current_mode = (await state.get_data()).get("mode", BotModeEnum.passive)

    text = (
        "üëæ *–í—ã–±–æ—Ä –ò–ò*\n\n"
        "ü§ñ *GPT‚Äë5* (10 —Ç–æ–∫–µ–Ω–æ–≤/–∑–∞–ø—Ä–æ—Å)\n"
        "–°–∞–º—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-—á–∞—Ç.\n\n"
        "‚ö° *GPT‚Äë5 Mini* (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        "–í–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤.\n\n"
        "üé® *DALL¬∑E 3* (40 —Ç–æ–∫–µ–Ω–æ–≤/–∑–∞–ø—Ä–æ—Å)\n"
        "–õ—É—á—à–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "üé¨ *Veo‚Äë3* (—Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∞—Ä–∏—Ñ–∞)\n"
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ —Ñ–æ—Ç–æ.\n\n"
        "üëá –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ò–ò:"
    )
    await call.message.edit_text(
        text=text,
        reply_markup=mode_keyboard(current_mode, gpt5_available=can_gpt5),
        parse_mode=ParseMode.MARKDOWN,
    )
    await call.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
