from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from dependency_injector.wiring import Provide, inject

from bot.container import Container
from bot.enums import BotModeEnum
from bot.interfaces.services.user import AbcUserService
from bot.interfaces.services.pricing import AbcPricingService
from bot.keyboards.change_ai import mode_keyboard
from bot.keyboards.start import account_keyboard, start_keyboard

router = Router()


@router.callback_query(F.data == "set_mode:chatgpt")
async def set_mode_chatgpt(call: CallbackQuery, state: FSMContext):
    await state.update_data(mode=BotModeEnum.gpt5)
    await call.answer("–†–µ–∂–∏–º ChatGPT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    await call.message.edit_reply_markup(reply_markup=mode_keyboard(BotModeEnum.gpt5))
    await call.message.answer(
        "ü§ñ –¢–µ–ø–µ—Ä—å –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å *GPT-5*.\n\n"
        "üîÑ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start",
        parse_mode="Markdown",
    )

@router.callback_query(F.data == "set_mode:dalle")
async def set_mode_dalle(call: CallbackQuery, state: FSMContext):
    await state.update_data(mode=BotModeEnum.dalle3)
    await call.answer("–†–µ–∂–∏–º DALL-E –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    await call.message.edit_reply_markup(reply_markup=mode_keyboard(BotModeEnum.dalle3))
    await call.message.answer(
        "üñºÔ∏è –¢–µ–ø–µ—Ä—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è *DALL-E 3* –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
        "üîÑ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start",
        parse_mode="Markdown",
    )

@router.callback_query(F.data == "goto:account")
@inject
async def goto_account(
    call: CallbackQuery,
    service: AbcUserService = Provide[Container.user_service],
):
    await call.answer()

    first_name = call.from_user.first_name
    last_name = call.from_user.last_name if call.from_user.last_name else None
    username = call.from_user.username if call.from_user.username else None
    user = await service.get_user(call.from_user.id)
    await call.message.edit_text(
        text=f"üéüÔ∏è *–ê–∫–∫–∞—É–Ω—Ç*\n\n"
             f"üêª‚Äç‚ùÑÔ∏è *{first_name}{f" {last_name}" if last_name else ""}{f" (@{username})" if username else ""}*\n\n"
             f"ü™ô –ë–∞–ª–∞–Ω—Å: *{user.balance}* —Ç–æ–∫–µ–Ω–æ–≤\n"
             f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: *+200* —Ç–æ–∫–µ–Ω–æ–≤\n\n"
             f"üëá –î–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=account_keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )



@router.callback_query(F.data == "goto:start")
@inject
async def goto_start(
    call: CallbackQuery,
    state: FSMContext,
    service: AbcUserService = Provide[Container.user_service],
    pricing: AbcPricingService = Provide[Container.pricing_service],
):
    await call.answer()

    await state.update_data(history=[])
    user, _ = await service.is_user_new(call.from_user)
    mode = (await state.get_data()).get('mode', BotModeEnum.passive)
    price = await pricing.get_price_for_mode(mode)
    await call.message.edit_text(
        text=(
            f"üëã –ü—Ä–∏–≤–µ—Ç, *{call.from_user.first_name}*!\n\n"
            f"ü™ô –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *{user.balance:g} —Ç–æ–∫–µ–Ω–æ–≤*\n\n"
            f"ü§ñ –¢–µ–∫—É—â–∏–π –ò–ò: *{mode}*\n"
            f"üí∏ –¶–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: *{price} —Ç–æ–∫–µ–Ω–æ–≤*\n\n"
            f"üëá –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
        ),
        reply_markup=start_keyboard(mode),
        parse_mode=ParseMode.MARKDOWN,
    )

@router.callback_query(F.data == "goto:switch")
async def goto_switch(call: CallbackQuery):
    await call.message.edit_text(
        text="üëá –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ò–ò:",
        reply_markup=mode_keyboard(BotModeEnum.passive),
        parse_mode=ParseMode.MARKDOWN,
    )
    await call.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
