import logging

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from dependency_injector.wiring import Provide, inject

from bot.container import Container
from bot.interfaces.services.user import AbcUserService
from bot.interfaces.uow import AbcUnitOfWork


logger = logging.getLogger(__name__)

router = Router()


def _ensure_admin_or_raise(user) -> None:
    if not getattr(user, "is_admin", False):
        raise PermissionError("Admin privileges required")


@router.callback_query(F.data == "goto:admin")
@inject
async def goto_admin(
    call: CallbackQuery,
    user_service: AbcUserService = Provide[Container.user_service],
):
    await call.answer()
    user = await user_service.get_user(call.from_user.id)
    try:
        _ensure_admin_or_raise(user)
    except PermissionError:
        await call.message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await call.message.answer(
        "üõ† *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "- /user <username> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username –∏–ª–∏ username)\n"
        "- /grant <username> <amount> ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É\n"
        "- /block <username> ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "- /unblock <username> ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n",
        parse_mode="Markdown",
    )


    


@router.message(Command("stats"))
@inject
async def stats_today(
    message: Message,
    user_service: AbcUserService = Provide[Container.user_service],
    uow: AbcUnitOfWork = Provide[Container.uow],
):
    admin = await user_service.get_user(message.from_user.id)
    try:
        _ensure_admin_or_raise(admin)
    except PermissionError:
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    async with uow:
        spent = await uow.ledger.total_spent_today()
        cnt = await uow.ledger.requests_count_today()
        by_model = await uow.ledger.requests_by_model_today()

    lines = [
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:",
        f"‚Äî –ü–æ—Ç—Ä–∞—á–µ–Ω–æ ‚≠ê: {spent}",
        f"‚Äî –ó–∞–ø—Ä–æ—Å–æ–≤: {cnt}",
        f"‚Äî –ü–æ –º–æ–¥–µ–ª—è–º:",
        f"   ‚Ä¢ GPT‚Äë5: {by_model.gpt_5}",
        f"   ‚Ä¢ GPT‚Äë5 Mini: {by_model.gpt_5_mini}",
        f"   ‚Ä¢ DALL¬∑E 3: {by_model.dalle3}",
    ]
    await message.answer("\n".join(lines))


def _normalize_username(text: str) -> str:
    name = text.strip()
    if name.startswith("@"):  # strip leading '@'
        name = name[1:]
    return name


@router.message(Command("user"))
@inject
async def user_stats(
    message: Message,
    user_service: AbcUserService = Provide[Container.user_service],
    uow: AbcUnitOfWork = Provide[Container.uow],
):
    admin = await user_service.get_user(message.from_user.id)
    try:
        _ensure_admin_or_raise(admin)
    except PermissionError:
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user <username>")
        return

    username = _normalize_username(parts[1])
    target = await user_service.get_user(telegram_id=admin.telegram_id)  # placeholder to satisfy type checker
    async with uow:
        user = await uow.user.get_by_username(username)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        totals = await uow.ledger.user_totals(user.id)

    lines = [
        f"üë§ @{username}",
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} ‚≠ê",
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–¥–∞' if user.is_blocked else '–Ω–µ—Ç'}",
        f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {totals.total_spent}",
        f"–°–µ–≥–æ–¥–Ω—è –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {totals.today_spent}",
        "–ó–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º (–≤—Å—ë –≤—Ä–µ–º—è):",
        f"‚Äî GPT‚Äë5: {totals.requests.gpt_5}",
        f"‚Äî GPT‚Äë5 Mini: {totals.requests.gpt_5_mini}",
        f"‚Äî DALL¬∑E 3: {totals.requests.dalle3}",
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {totals.last_request_at}",
    ]
    await message.answer("\n".join(lines))


@router.message(Command("grant"))
@inject
async def grant_tokens(
    message: Message,
    user_service: AbcUserService = Provide[Container.user_service],
):
    admin = await user_service.get_user(message.from_user.id)
    try:
        _ensure_admin_or_raise(admin)
    except PermissionError:
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant <username> <amount>")
        return

    username = _normalize_username(parts[1])
    try:
        amount = int(parts[2])
    except ValueError:
        await message.answer("amount –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    updated = await user_service.add_tokens_by_username(username, amount, reason=f"admin grant by {message.from_user.id}")
    if not updated:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await message.answer(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚≠ê @{username}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {updated.balance}")


@router.message(Command("block"))
@inject
async def block_user(
    message: Message,
    user_service: AbcUserService = Provide[Container.user_service],
):
    admin = await user_service.get_user(message.from_user.id)
    try:
        _ensure_admin_or_raise(admin)
    except PermissionError:
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <username>")
        return
    username = _normalize_username(parts[1])
    updated = await user_service.block_user_by_username(username)
    if not updated:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await message.answer(f"‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


@router.message(Command("unblock"))
@inject
async def unblock_user(
    message: Message,
    user_service: AbcUserService = Provide[Container.user_service],
):
    admin = await user_service.get_user(message.from_user.id)
    try:
        _ensure_admin_or_raise(admin)
    except PermissionError:
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <username>")
        return
    username = _normalize_username(parts[1])
    updated = await user_service.unblock_user_by_username(username)
    if not updated:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


