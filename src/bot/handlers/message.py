import logging

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from dependency_injector.wiring import inject, Provide

from bot.container import Container
from bot.enums import BotModeEnum
from bot.errors import OpenAIBadRequestError
from bot.interfaces.services.gpt import AbcOpenAIService
from bot.keyboards.change_ai import mode_keyboard

logger = logging.getLogger(__name__)

router = Router()

@router.message()
@inject
async def common_message_handler(
    message: Message,
    state: FSMContext,
    openai_service: AbcOpenAIService = Provide[Container.openai_service],
):
    # –ö–µ–π—Å—ã
    # 1. –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º)
    # 2. –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ GPT
    # 2.1 –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º
    # 2.2 –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # 2.3 –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ
    # 2.4 –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    # 2.5 –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # 2.6 –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–æ—Ç–æ
    logger.info(f"Message from user {message.from_user.id} {message.from_user.username}: {message.text}.")
    state_data = await state.get_data()
    mode = state_data.get("mode")

    if mode == BotModeEnum.gpt5:
        status_msg = await message.answer("üîÑ *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...*", parse_mode="Markdown")
        try:
            response = await openai_service.process_gpt_request(message, state)
            if response.image_url:
                await message.answer_photo(response.image_url, caption="üñºÔ∏è –í–æ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n[–°–¥–µ–ª–∞–Ω–æ –≤ Vento](https://t.me/vento_toolbot)", parse_mode="Markdown")
            else:
                await status_msg.edit_text(response.text, parse_mode="Markdown")
        except OpenAIBadRequestError:
            await status_msg.edit_text("‚ùóÔ∏è *OpenAI –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å :(*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.", parse_mode="Markdown")

    elif mode == BotModeEnum.dalle3:
        status_msg = await message.answer("üîÑ *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...*", parse_mode="Markdown")
        try:
            response = await openai_service.process_dalle_request(message)
            await message.answer_photo(response.image_url, caption="üñºÔ∏è –í–æ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n[–°–¥–µ–ª–∞–Ω–æ –≤ Vento](https://t.me/vento_toolbot)", parse_mode="Markdown")
        except OpenAIBadRequestError:
            await status_msg.edit_text("‚ùóÔ∏è *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, OpenAI –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.", parse_mode="Markdown")

    elif mode == BotModeEnum.passive or not mode:
        await message.answer("üëá –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, –∫—É–¥–∞ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å:", reply_markup=mode_keyboard(BotModeEnum.passive))
