import logging

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from dependency_injector.wiring import inject, Provide

from bot.container import Container
from bot.enums import BotModeEnum
from bot.errors import OpenAIBadRequestError, InsufficientBalanceError
from bot.interfaces.services.gpt import AbcOpenAIService
from bot.interfaces.services.user import AbcUserService
from bot.interfaces.services.pricing import AbcPricingService
from bot.keyboards.change_ai import mode_keyboard

logger = logging.getLogger(__name__)

router = Router()

@router.message()
@inject
async def common_message_handler(
    message: Message,
    state: FSMContext,
    openai_service: AbcOpenAIService = Provide[Container.openai_service],
    user_service: AbcUserService = Provide[Container.user_service],
    pricing_service: AbcPricingService = Provide[Container.pricing_service],
):
    logger.info(f"Message from user {message.from_user.id} {message.from_user.username}: {message.text}.")
    state_data = await state.get_data()
    mode = state_data.get("mode")

    user = await user_service.get_user(message.from_user.id)
    if user and getattr(user, "is_blocked", False):
        await message.answer("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if mode == BotModeEnum.gpt5 or mode == BotModeEnum.gpt5_mini:
        status_msg = await message.answer("üîÑ *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...*", parse_mode="Markdown")
        try:
            response = await openai_service.process_gpt_request(message, state)
            if response.image_url:
                await message.answer_photo(response.image_url, caption="üñºÔ∏è –í–æ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n[–°–¥–µ–ª–∞–Ω–æ –≤ Vento](https://t.me/vento_toolbot)", parse_mode="Markdown")
            else:
                await status_msg.edit_text(response.text, parse_mode="Markdown")
        except InsufficientBalanceError:
            await status_msg.edit_text("‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", parse_mode="Markdown")
        except OpenAIBadRequestError:
            await status_msg.edit_text("‚ùóÔ∏è *OpenAI –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å :(*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.", parse_mode="Markdown")

    elif mode == BotModeEnum.dalle3:
        status_msg = await message.answer("üîÑ *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...*", parse_mode="Markdown")
        try:
            response = await openai_service.process_dalle_request(message)
            await message.answer_photo(response.image_url, caption="üñºÔ∏è –í–æ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n[–°–¥–µ–ª–∞–Ω–æ –≤ Vento](https://t.me/vento_toolbot)", parse_mode="Markdown")
        except InsufficientBalanceError:
            await status_msg.edit_text(
                "‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DALL¬∑E 3.\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π /start",
                parse_mode="Markdown",
            )
        except OpenAIBadRequestError:
            await status_msg.edit_text("‚ùóÔ∏è *OpenAI –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å :(*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.", parse_mode="Markdown")

    elif mode == BotModeEnum.passive or not mode:
        can_gpt5 = await pricing_service.ensure_user_can_afford(user.balance, BotModeEnum.gpt5)
        await message.answer(
            "üëá –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, –∫—É–¥–∞ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å:",
            reply_markup=mode_keyboard(BotModeEnum.passive, gpt5_available=can_gpt5),
        )
